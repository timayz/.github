name: "Test"

on:
  workflow_call:
    inputs:
      postgres:
        default: false
        required: false
        type: boolean
      postgres-image:
        default: "postgres:17.5-alpine"
        required: false
        type: string
      mysql:
        default: false
        required: false
        type: boolean
      mysql-image:
        default: "mysql:8.0-debian"
        required: false
        type: string
      cockroach:
        default: false
        required: false
        type: boolean
      cockroach-version:
        default: "v24.3.18"
        required: false
        type: string
      cockroach-user:
        default: "timada"
        required: false
        type: string
      protoc:
        default: false
        required: false
        type: boolean
      tests:
        default: '["--workspace"]'
        required: false
        type: string

env:
  RUST_BACKTRACE: 1

jobs:
  fmt:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5

      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - run: cargo fmt -- --check

  clippy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5

      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - uses: arduino/setup-protoc@v2
        if: ${{ inputs.protoc }}
        with:
          repo-token: ${{ secrets.GH_TOKEN }}

      - uses: Swatinem/rust-cache@v2
        with:
          save-if: ${{ contains(fromJSON('["refs/heads/main", "refs/heads/alpha", "refs/heads/beta", "refs/heads/rn"]'), github.ref) }}

      - run: cargo clippy --all-features -- -D warnings

  machete:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5

      - name: Install Protoc
        if: ${{ inputs.protoc }}
        uses: arduino/setup-protoc@v2
        with:
          repo-token: ${{ secrets.GH_TOKEN }}

      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
        with:
          save-if: ${{ contains(fromJSON('["refs/heads/main", "refs/heads/alpha", "refs/heads/beta", "refs/heads/rn"]'), github.ref) }}

      - run: |
          cargo install --locked cargo-machete || true
          cargo machete

  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        cmd: ${{ fromJSON(inputs.tests) }}

    services:
      postgres:
        image: ${{ inputs.postgres && inputs.postgres-image || '' }}
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

      mysql:
        image: ${{ inputs.mysql && inputs.mysql-image || '' }}
        env:
          MYSQL_ROOT_PASSWORD: root
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd "mysqladmin ping -h localhost"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 3306:3306

    steps:
      - uses: actions/checkout@v5

      - uses: dtolnay/rust-toolchain@stable

      - uses: arduino/setup-protoc@v2
        if: ${{ inputs.protoc }}
        with:
          repo-token: ${{ secrets.GH_TOKEN }}

      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.cmd }}
          save-if: ${{ contains(fromJSON('["refs/heads/main", "refs/heads/alpha", "refs/heads/beta", "refs/heads/rn"]'), github.ref) }}

      - name: Start a single CockroachDB instance with docker
        if: ${{ inputs.cockroach }}
        run: |
          docker pull cockroachdb/cockroach:${{ inputs.cockroach-version }}
          docker run -d --name roach --hostname roach -p 26257:26257 -p 8080:8080 cockroachdb/cockroach:${{ inputs.cockroach-version }} start-single-node --insecure
          sudo apt update && sudo apt install wait-for-it -y
          wait-for-it -h localhost -p 26257
          docker exec roach bash -c "echo 'CREATE USER IF NOT EXISTS ${{ inputs.cockroach-user }}; GRANT admin TO ${{ inputs.cockroach-user }};' | cockroach sql --insecure"

      - run: cargo test ${{ matrix.cmd }}
