name: "Test"

on:
  workflow_call:
    inputs:
      postgres:
        default: false
        required: false
        type: boolean
      postgres-version:
        default: '16.0-alpine'
        required: false
        type: string
      cockroach:
        default: false
        required: false
        type: boolean
      cockroach-version:
        default: 'v23.1.10'
        required: false
        type: string
      cockroach-user:
        default: 'timada'
        required: false
        type: string

env:
  RUST_BACKTRACE: 1

jobs:
  fmt:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - name: Check Format
        run: cargo fmt -- --check

  clippy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Install Protoc
        uses: arduino/setup-protoc@v2
        with:
          repo-token: ${{ secrets.GH_TOKEN }}

      - name: Set up cargo cache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/            
          key: ${{ runner.os }}-cargo-clippy-service-testing
          restore-keys: ${{ runner.os }}-cargo-clippy-

      - name: Clippy
        run: cargo clippy --all-features -- -D warnings

  udeps:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Protoc
        uses: arduino/setup-protoc@v2
        with:
          repo-token: ${{ secrets.GH_TOKEN }}

      - name: Install Rust
        uses: dtolnay/rust-toolchain@nightly

      - name: Set up cargo cache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/            
          key: ${{ runner.os }}-cargo-udeps-service-testing
          restore-keys: ${{ runner.os }}-cargo-udeps-

      - name: Udeps
        run: |
          cargo install --locked cargo-udeps || true
          make udeps

  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: ${{ inputs.postgres && inputs.postgres-version || '' }}
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install Protoc
        uses: arduino/setup-protoc@v2
        with:
          repo-token: ${{ secrets.GH_TOKEN }}

      - name: Set up cargo cache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/            
          key: ${{ runner.os }}-cargo-test-service-testing
          restore-keys: ${{ runner.os }}-cargo-test-

      - name: Start a single CockroachDB instance with docker
        if: ${{ inputs.cockroach }}
        run: |
          docker pull cockroachdb/cockroach:${{ inputs.cockroach-version }}
          docker run -d --name roach --hostname roach -p 26257:26257 -p 8080:8080 cockroachdb/cockroach:${{ inputs.cockroach-version }} start-single-node --insecure
          sudo apt update && sudo apt install wait-for-it -y
          wait-for-it -h localhost -p 26257
          docker exec roach bash -c "echo 'CREATE USER IF NOT EXISTS ${{ inputs.cockroach-user }}; GRANT admin TO ${{ inputs.cockroach-user }};' | cockroach sql --insecure"

      - name: Test
        run: make test
