name: "Service docker"

on:
  workflow_call:
    inputs:
      publish:
        default: true
        required: false
        type: boolean
    secrets:
      CARGO_REGISTRY_TOKEN:
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Create requirements file
        uses: "DamianReeves/write-file-action@master"
        with:
          path: requirements.txt
          write-mode: overwrite
          contents: |
            tomlkit==0.12.1

      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - run: pip install -r requirements.txt

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Create publish file
        uses: "DamianReeves/write-file-action@master"
        with:
          path: publish.py
          write-mode: overwrite
          contents: |
            import os, sys, subprocess, json, tomlkit

            def publish(name):
                process = subprocess.run(['cargo', 'publish', '--no-verify', '-p', name])

                if process.returncode > 0:
                    sys.exit(process.returncode)

            def filter_deps(entry):
                key, value = entry

                if "path" in value:
                    return True
                
                return False

            def publish_deps(manifests, manifest, published):
                deps = dict(filter(filter_deps, manifest["dependencies"].items()))

                if "dev-dependencies" in manifest:
                  deps.update(dict(filter(filter_deps, manifest["dev-dependencies"].items())))
                
                for key in deps:
                    if key not in manifests:
                        print('publish not enabled for', key)
                        sys.exit(1)
                    published = publish_deps(manifests, manifests[key], published)

                name = manifest["package"]["name"]

                if not name in published:
                    published[name] = True
                    publish(name)

                return published

            metadata = subprocess.run(['cargo', 'metadata', '--format-version', '1', '--offline', '--no-deps'], stdout=subprocess.PIPE).stdout.decode('utf-8')
            metadata = json.loads(metadata)

            manifests = dict()

            for package in metadata['packages']:
                with open(package['manifest_path'], mode="rt", encoding="utf-8") as fp:
                        manifest = tomlkit.load(fp)

                package = manifest["package"]

                if not "publish" in package:
                    continue

                if package["publish"]:
                    manifests[package["name"]] = manifest


            published = dict()

            for key in manifests:
                published = publish_deps(manifests, manifests[key], published)

      - name: Publish
        if: ${{ inputs.publish }}
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          python publish.py
