name: "Service testing"

on:
  workflow_call:
    inputs:
      db_name:
        required: true
        type: string

env:
  RUST_BACKTRACE: 1

jobs:
  cargo:
    runs-on: ubuntu-latest

    # services:
    #   postgres:
    #     image: postgres:15-alpine
    #     env:
    #       POSTGRES_PASSWORD: postgres
    #     options: >-
    #       --health-cmd pg_isready
    #       --health-interval 10s
    #       --health-timeout 5s
    #       --health-retries 5
    #     ports:
    #       - 5432:5432
      # pikav:
      #   image: timada0/pikav:0.12.3
      #   # env:
      #   #   POSTGRES_PASSWORD: postgres
      #   # options: >-
      #   #   --health-cmd pg_isready
      #   #   --health-interval 10s
      #   #   --health-timeout 5s
      #   #   --health-retries 5
      #   ports:
      #     - 6750:6750
      #     - 6751:6751


  # pikav:
  #   image: timada0/pikav:0.12.3
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.pikav.rule=Host(`pikav.localhost`)"
  #     - "traefik.http.routers.pikav.tls=true"
  #     - "traefik.http.routers.pikav.entrypoints=https"
  #   depends_on:
  #     - oathkeeper
  #   ports:
  #     - "6750:6750"
  #     - "6751:6751"
  #   volumes:
  #     - ./pikav/pikav.yml:/etc/pikav/config.yml
  #   networks:
  #     - intranet

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install Protoc
        uses: arduino/setup-protoc@v1
        with:
          repo-token: ${{ secrets.GH_TOKEN }}

      # - name: Check Format
      #   uses: actions-rs/cargo@v1
      #   with:
      #     command: fmt
      #     args: -- --check

      # - name: Clippy
      #   uses: actions-rs/cargo@v1
      #   with:
      #     command: clippy
      #     args: --all-features -- -D warnings

      - name: Start a single CockroachDB instance with docker
        env:
          CONTAINER_ENTRYPOINT: ${{ 'cockroach' }}
        run: |
          echo $CONTAINER_ENTRYPOINT
          docker pull cockroachdb/cockroach:v22.2.5
          docker run -d --name roach --hostname roach -p 26257:26257 -p 8080:8080 cockroachdb/cockroach:v22.2.5 start-single-node --insecure
          sudo apt update && sudo apt install wait-for-it -y
          wait-for-it -h localhost -p 26257
          docker exec roach bash -c "echo 'CREATE USER IF NOT EXISTS ${{ inputs.db_name }}; GRANT ALL ON DATABASE ${{ inputs.db_name }} TO ${{ inputs.db_name }} WITH GRANT OPTION;ALTER USER ${{ inputs.db_name }} CREATEDB;' | $CONTAINER_ENTRYPOINT sql --insecure"

      - name: Test
        run: make test
  pnpm:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@v2
        with:
          version: 7

      - uses: actions/setup-node@v3
        with:
          node-version: 18
          # cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - run: pnpm --stream -r lint
      - run: pnpm --stream -r test
